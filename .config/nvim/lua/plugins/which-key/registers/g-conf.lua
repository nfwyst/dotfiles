return {
  a = { "<cmd>lua vim.lsp.buf.declaration()<cr>", "Go to declaration" },
  d = { "<cmd>lua vim.lsp.buf.definition()<cr>", "Go to definition" },
  D = { "<cmd>Telescope lsp_definitions<cr>", "Go to telescope definitions" },
  s = { "<cmd>TSToolsGoToSourceDefinition<cr>", "Go to source(TS)" },
  F = { "<cmd>TSToolsFileReferences<cr>", "Go to file references(TS)" },
  L = { "<cmd>lua vim.lsp.buf.references()<cr>", "Go to references list" },
  r = {
    name = "Refactor",
    a = { "<cmd>lua vim.lsp.buf.code_action()<cr>", "Show code action" },
    r = { "<cmd>lua vim.lsp.buf.rename()<cr>", "Rename identifier" },
    n = { "<cmd>TSToolsRenameFile<cr>", "Rename file(TS)" },
    s = { "<cmd>TSToolsSortImports<cr>", "Sort imports(TS)" },
  },
  R = { "<cmd>Telescope lsp_references<cr>", "Go to telescope references" },
  I = { "<cmd>lua vim.lsp.buf.implementation()<cr>", "Go to implementation" },
  l = {
    '<cmd>lua vim.diagnostic.open_float({ border = "rounded", focusable = true })<cr>',
    "Show diagnostic",
  },
  h = { "<cmd>lua vim.lsp.buf.hover()<cr>", "Show hover info" },
  S = { "<cmd>lua vim.lsp.buf.signature_help()<cr>", "Show signature help" },
  o = { "<c-o>", "Jump back" },
  w = { "<c-i>", "Jump forward" },
  b = { "<c-t>", "Go back" },
  X = { "<cmd>OpenCurFile<cr>", "Open current file with default app" },
}
